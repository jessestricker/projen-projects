// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GradleProject matches snapshot 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/gradlew text eol=lf
/gradlew.bat text eol=crlf
/package-lock.json linguist-generated
/package.json linguist-generated
/tsconfig.projen.json linguist-generated",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
  merge_group: {}
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_target')
    steps:
      - uses: amannn/action-semantic-pull-request@v5.4.0
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/tsconfig.projen.json
!/.github/workflows/pull-request-lint.yml
/.gradle/
/.idea/
/.kotlin/
/build/
!/.projenrc.ts
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "constructs",
        "type": "build",
        "version": "^10.0.0",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "ts-node",
        "type": "build",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".github/workflows/pull-request-lint.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "tsconfig.projen.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "clean": {
        "description": "Deletes the build output.",
        "name": "clean",
        "steps": [
          {
            "spawn": "clean:gradle",
          },
        ],
      },
      "clean:gradle": {
        "description": "Deletes the Gradle build directory.",
        "name": "clean:gradle",
        "steps": [
          {
            "exec": "gw clean",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "compile:gradle",
          },
        ],
      },
      "compile:gradle": {
        "description": "Assembles main classes.",
        "name": "compile:gradle",
        "steps": [
          {
            "exec": "gw classes",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "ts-node --project tsconfig.projen.json .projenrc.ts",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "npm install",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "npm ci",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "spawn": "package:gradle",
          },
        ],
      },
      "package:gradle": {
        "description": "Assembles the outputs of this project.",
        "name": "package:gradle",
        "steps": [
          {
            "exec": "gw assemble",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
        "steps": [
          {
            "spawn": "test:gradle",
          },
        ],
      },
      "test:gradle": {
        "description": "Runs all checks.",
        "name": "test:gradle",
        "steps": [
          {
            "exec": "gw check",
          },
        ],
      },
    },
  },
  "README.md": "# replace this",
  "build.gradle.kts": "plugins {
    alias(libs.plugins.kotlin.jvm)
}

repositories {
    mavenCentral()
}

kotlin {
    jvmToolchain(21)
}
",
  "gradle/libs.versions.toml": "[versions]
kotlin = "2.1.21"

[plugins]
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "devDependencies": {
      "constructs": "^10.0.0",
      "projen": "*",
      "ts-node": "*",
    },
    "license": "UNLICENSED",
    "private": true,
    "scripts": {
      "build": "npx projen build",
      "clean": "npx projen clean",
      "clean:gradle": "npx projen clean:gradle",
      "compile": "npx projen compile",
      "compile:gradle": "npx projen compile:gradle",
      "default": "npx projen default",
      "eject": "npx projen eject",
      "package": "npx projen package",
      "package:gradle": "npx projen package:gradle",
      "post-compile": "npx projen post-compile",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "test:gradle": "npx projen test:gradle",
    },
  },
  "settings.gradle.kts": "plugins {
    id("org.gradle.toolchains.foojay-resolver-convention") version "0.9.0"
}

rootProject.name = "gradle-project"
",
  "src/main/kotlin/Main.kt": "fun main() {
    println("Hello, World!")
}
",
  "tsconfig.projen.json": {
    "compilerOptions": {},
    "exclude": [
      "node_modules",
    ],
    "include": [
      "**/*.ts",
      ".projenrc.ts",
      "projenrc/**/*.ts",
    ],
  },
}
`;
